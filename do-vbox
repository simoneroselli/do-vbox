#!/usr/bin/env python
#
# Author: ZMo <simoneroselli78gmail.com>
#
# Auto-setup for VirtualBox virtual machines:
# retrieve vm from a repository / install / and
# configure. Also commit a custom vm on a repository.

from libdovbox import *

import os, sys, re, getpass
import urllib, urllib2, httplib
import argparse, urlparse, zipfile
import shutil, subprocess, time

vbox_user = getpass.getuser()
vbox_setup_dir = '/usr/local/vbox/' + vbox_user + '/'
vbox_sources = '/etc/do-vbox/repos'
vbox_list_file = '/tmp/vbox-index'

# Read
def readfile(filename):
    f = file(filename)
    while True:
        line = f.readline()
        if len(line) == 0:
            break
        print line,
    f.close()

# Grep
def grep(string, filename):
    for line in open(filename).readlines():
        match = re.search(string + '.*', line, re.IGNORECASE)
        if match is not None:
            print match.group(0)

# Move
def move(src, dest):
    if os.path.isdir(dest):
        shutil.move(src, dest)
    else:
        os.makedirs(dest, mode=0777)
        shutil.move(src, dest)

# Show
def show(vm_name):
    vms = VirtualMachine.parseFileList(vbox_list_file)
    for vm in vms:
        if vm_name == vm.name:
            for key, value in vm.__dict__.items():
                if value: print(key + ': ' + value)

# Search
def search(vm_name):
    vms = VirtualMachine.parseFileList(vbox_list_file)
    for vm in vms:
        match = re.search(vm_name, vm.name, re.IGNORECASE)
        if match is not None:
            print vm.name, '-', vm.desc
                
# Zip
def zipVm(dirname):
    vm_zip = zipfile.ZipFile(dirname + '.zip', 'w', allowZip64=True)
    
    for root, dirs, files in os.walk(dirname):
        for name in files:
            name = os.path.join(root, name)
            print 'Compressing', name, '...'
            vm_zip.write(name, compress_type=zipfile.ZIP_DEFLATED)
        
    vm_zip.close()

# Unzip
def unzip(filename, dir):
    vm_zip = zipfile.ZipFile(filename)
    for name in vm_zip.namelist():
        if name.endswith('/'):
            try:
                ensDir(os.path.join(dir, name))
            except OSError as dir_present_err:
                print dir_present_err
        
        else:
            ensDir(dir)
            vm_zip.extract(name, dir)

# Check and
def ensCreateDir(dir):
    """ Check for the setup directory and ask for creating in the case it
    doesn't exists """
    if not os.path.exists(dir):
        answ = raw_input(dir +' not found! Would you like to create it? (type \'yes\' or \'no\') ')
        if answ == 'yes':
            try:
                os.makedirs(dir, mode=0775)
            except OSError:
                print ""
                print "It seems you don't have permissions to create the directory you need"
                print "Please, provide one with the right ownership. You can go for the default:"
                print "chown -R ", vbox_user+":"+vbox_user, dir
                print ""
                print "You could provide any writeable directory (eg: .VirtualBox)"
                exit()
        else:
            print "No directory given .. exit setup"
            exit()

# Easy directory check
def ensDir(dir):
    """ Easy directory check """
    if not os.path.exists(dir):
        try:
            os.makedirs(dir, mode=0775)
        except OSError:
            print "Error: can't create", dir
            exit()

# Parse URL
def getVm(url, local_file):
    x = urlparse.urlparse(url)
    conn = httplib.HTTPConnection(x.netloc)
    conn.request("GET", x.path)
    res = conn.getresponse()
    if res.status in (404, 403):
        raise IOError(res.reason)
    
    # 2 cents download progress counter
    downloaded = 0
    fd = open(local_file, 'w')
    while True:
        data = res.read(512*1024)
        if len(data) == 0:
            break
        downloaded += len(data)
        fd.write(data)
        sys.stdout.write('\b' * 80)
        sys.stdout.write('Downloading %s..' % (sizeToHuman(downloaded)))
    fd.close()
    conn.close()
    sys.stdout.write('\n')

def sizeToHuman(size):
    kb = 1024.0
    mb = 1024.0 *kb
    gb = 1024.0 *mb
    if size >= gb:
        return '%.2fGiB' % (size / gb)
    if size >= mb:
        return '%.2fMiB' % (size / mb)
    if size >= kb:
        return '%.2fKiB' % (size / kb)
    return '%dbyte' % size

# Indexfile validation
def parseIndexUrl(repo_url):
    """ Ensure about validity of vbox-index file on the repository """
    resp = urllib.urlopen(repo_url)
    info = resp.info()
    for k, v in info.items():
        if k != 'content-type':
            pass
        else:
            if v != 'text/plain':
                print "Found an invalid vbox-index file."
                print "Please check", repo_url
                print "or remove the repository from your sources file"
                exit()

# Build vbox-index file
def listUpdate():
    """ Retrieve vm from all repositories in 'repos' file """
    if os.path.exists(vbox_list_file):
        os.unlink(vbox_list_file)

    vbox_repository = []
    for r in open(vbox_sources).readlines():
        if not r.startswith('repo'):
            continue

        m = re.search('repo.*', r)
        if m is not None:
            m = m.group(0)
            vbox_repository.extend([m.split('=')[1].strip()])

    for r in vbox_repository:
        try:
            repo = r + 'vbox-index'
            resp = urllib2.urlopen(repo, timeout=5)
            parseIndexUrl(repo)
            vbox_list = resp.read()
            fd = open(vbox_list_file, 'a')
            fd.write(vbox_list)
            fd.write('\n')
            fd.close()
        except urllib2.HTTPError as not_found_err:
            print "%s" "%s" % (r + 'vbox-index // ', not_found_err)
            exit()

# Download vm from repository
def downloadVm(virtualmachine):
    vms = VirtualMachine.parseFileList(vbox_list_file)
    for vm in vms:
        if virtualmachine == vm.name:
            try:
                getVm(vm.repo + virtualmachine + '.zip', virtualmachine +  '.zip')
            except IOError as not_found_err:
                print 'VM "%s" %s' % (vm_name, not_found_err)
                exit()

# Copy and rename vm tree for commit
def renCopy(dirname, rename):
    """ Copy and rename vm tree before commit """
    shutil.copytree(dirname, rename)
    for root, dirs, files in os.walk(rename):
        for f in files:
            f = os.path.join(root, f)
            vdi = os.path.join(root, rename + '.vdi')
            vbox = os.path.join(root, rename + '.vbox')
            vboxprev = os.path.join(root, rename + '.vbox-prev')
            if f.endswith('.vdi'):
                os.rename(f, vdi)
                subprocess.call(['VBoxManage', 'internalcommands', 'sethduuid', vdi])
            elif f.endswith('.vbox'):
                os.rename(f, vbox)
            elif f.endswith('vbox-prev'):
                os.rename(f, vboxprev)

# Rename vm if it is alredy in your VBox list
def incrVmName(vm_name):
    """ Diversifying VM name operation, based on VBoxManage commands suite output """
    installed_vms = subprocess.check_output(["VBoxManage", "list", "vms"]).split()

    count = 0

    for v in installed_vms:
        if v.startswith('"'):
            v = v.strip('"')
            if v.startswith(vm_name):
                count += 1
    
    if count is not 0:
        vm_name = '%s%s%d' % (vm_name, '-', count+1)
        return vm_name
    else:
        return False

# Rename the zip archive files with increased number
def incrFiles(name, rename, src, dst):
    """ Rename zip archive files with an increased number """
    os.chdir(src)
    os.rename(name, rename)
    os.chdir(rename)
    list_file = os.listdir('.')
    vdi = rename + '.vdi'
    vbox = rename + '.vbox'
    for f in list_file:
        if f.endswith('.vdi'):
            os.rename(f, vdi)
        elif f.endswith('.vbox'):
            os.rename(f, vbox)
    os.chdir(src)
    dst = dst + '/' + rename
    shutil.copytree(rename, dst)

# Ensure about repos file
def checkRepos():
	""" Ensure about /etc/do-vbox/repos file """
	if not os.path.isfile(vbox_sources):
		print "Error: missing", vbox_sources, "file"
		exit()


# Be aware virtualbox service is running
def checkVbox():
    """ Check if virtualbox service is running """
    checkm = subprocess.call("lsmod | grep vbox", shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    if checkm == 1:
        print "VBox service is not running." 
        print "Try with 'service vboxdrv start'"
        exit()

# Parse
def parse():
    parser = argparse.ArgumentParser(add_help=False, usage='\n \
    --list                          List all available machines\n \
    --index                         Display the global index file\n \
    --show VM_NAME                  Display vm properties\n \
    --search <STR>                  Search for a vm by name\n \
    --download VM_NAME              Download vm in the current dir\n \
    --setup VM_NAME [path]          Download and configure vbox machine\n \
    --commit VM_NAME CUSTOM_NAME    Upload your custom vm to a given repository')
    
    parser.add_argument('--list', action='store_true', help='List all available machines')
    parser.add_argument('--index', action='store_true', help='Display the global index file')
    parser.add_argument('--show', nargs=1, help='Display vm properties')
    parser.add_argument('--search', nargs=1, help='Search for a vm by name')
    parser.add_argument('--download', nargs=1, help='Download vm in the current dir')
    parser.add_argument('--setup', nargs='+', help='Download and configure vbox machines')
    parser.add_argument('--commit', nargs='+', help='Upload your custom vm to a given repository') 
    return (parser, parser.parse_args())


if __name__ == '__main__':
    parser, options = parse()
    if len(sys.argv)==1:
        parser.print_usage()

    # --list
    if options.list:
        checkRepos()
        listUpdate()
        grep('name', vbox_list_file)

    # --index
    if options.index:
        checkRepos()
        listUpdate()
        readfile(vbox_list_file)
         
    # --show
    if options.show:
        checkRepos()
        listUpdate()
        show(sys.argv[2])

    # --search
    if options.search:
        checkRepos()
        listUpdate()
        search(sys.argv[2])

    # --download    
    if options.download:
        vm_name = options.download[0]
        downloadVm(vm_name)

    # --commit
    if options.commit:
        checkRepos()
        checkVbox()
        vm_name = options.commit[0]
        try:
            new_name = options.commit[1]
        except IndexError:
            print "Usage: do-vbox --commit VM_NAME CUSTOM_NAME"
            exit()

        # Set repo url for commit
        vms = VirtualMachine.parseFileList(vbox_list_file)
        for vm in vms:
            if vm_name == vm.name:
                repo = vm.repo.lstrip('http://').rstrip('/')

        # Create vm zip archive and store vm properties into
        for root, dirs, files in os.walk(vbox_setup_dir):
            for name in dirs:
                if name == vm_name:
                    VM_DESC = raw_input('Describe shortly your custom vm: ')
                    os.chdir(vbox_setup_dir)
                    print 'Cloning existent', vm_name, '..'
                    renCopy(name, new_name)
                    zipVm(new_name)
                    new_name_zip = new_name + '.zip'

                    # Retrieve VM properties
                    tmpfile = '/tmp/file.txt'
                    vm_properties = subprocess.check_output(["VBoxManage", "showvminfo", vm_name])
                    f = open(tmpfile, 'w')
                    f.write(vm_properties)
                    f.close()
                    
                    for line in open(tmpfile).readlines():
                        if re.match('os type', line, re.IGNORECASE):
                            ostype = line.split()[2]
                        if re.match('memory', line, re.IGNORECASE):
                            ram = line.split()[2]
                        if re.match('vram', line, re.IGNORECASE):
                            vram = line.split()[2]

                    # Define VM properties 
                    VM_NAME = new_name
                    VM_OSTYPE = ostype
                    VM_RAM = ram
                    VM_VRAM = vram
                    VM_MD5SUM = md5Sum(new_name_zip)
                    VM_UPDATED = date_time=time.localtime(time.time())[:3]
                    VM_SIZE = os.path.getsize(new_name_zip)

                    # Open the zip archive to append vm properties
                    x = ''
                    new_name_zip_info = zipfile.ZipFile(new_name_zip, 'a')
                    try:
                        VM_PROPERTIES = {
                        'name' : VM_NAME, 
                        'md5' : VM_MD5SUM,                                                                                  
                        'desc' : VM_DESC,                                                
                        'update' : str(VM_UPDATED),                                                                                      
                        'ostype' : VM_OSTYPE,                                                                                      
                        'size' : str(VM_SIZE),                                                                                      
                        'ram' : VM_RAM,                                                                                      
                        'vram' : VM_VRAM                                                                                      
                        }

                        info = zipfile.ZipInfo('x')
                        info.compress_type=zipfile.ZIP_DEFLATED
                        info.comment= repr(VM_PROPERTIES)
                        new_name_zip_info.writestr(info, x)
                    finally:
                        new_name_zip_info.close() 
                        os.unlink(tmpfile)

        # Ask for a custom repo url or keep the vm.repo url
        repourl = raw_input('Type URL for your commit [' + repo + ']')
        if repourl == '':
            repourl = repo
            # More passed url checks HERE

        sshkey = raw_input('Enter the full path of your RSA/DSA key (ie: id_vbox): ')
        # TODO: check for the passed key. Give some attempts to the
        # user avoiding fails and the restart
        vboxCommit(repourl, sshkey, new_name_zip, new_name_zip)


    # --setup
    # Check if 2nd argument (directory path) is given and
    # initialize vbox_setup_dir with that value
    if options.setup:
        checkVbox()
        checkRepos()
        listUpdate()
        if len(options.setup) > 1:
            vbox_setup_dir = " ".join(options.setup[1:])
            if not vbox_setup_dir.endswith("/"):
                vbox_setup_dir = vbox_setup_dir + "/"
                ensCreateDir(vbox_setup_dir)
        else:
            ensCreateDir(vbox_setup_dir)
        
        # Download vm from repository
        setup_vm = options.setup[0]
        setup_vm_zip = setup_vm + '.zip'
        downloadVm(setup_vm)

        # Perform md5sum on dumped vm
        print "Retrieve md5 from ", setup_vm, " .."
        md5_vm_zip = md5Sum(setup_vm_zip)
        vms = VirtualMachine.parseFileList(vbox_list_file)
        md5_matched = False
        for vm in vms:
            if vm.md5 == md5_vm_zip:
                md5_matched = True
                setup_vm = vm.name
                break
        
        if md5_matched == True:
            print "Md5sum matched!"
        
            # In case a vm already exists, append an incremental number to the
            # vm name, then copy to the setup folder the
            # renamed vm
            exist_vm = incrVmName(setup_vm)
            if exist_vm is not False:
                tmp_dir = '/tmp'
                print 'Extract', setup_vm_zip, 'to', tmp_dir, '..'
                unzip(setup_vm_zip, tmp_dir)
                incrFiles(setup_vm, exist_vm, tmp_dir, vbox_setup_dir)
            else:       
                print 'Extract', setup_vm_zip, 'to', vbox_setup_dir, '..'
                unzip(setup_vm_zip, vbox_setup_dir)
                
            # LiNuX
            # Define directories and vm name
            if os.name == 'posix':
                # Retrive other values from object 'vm'; put some default values in
                # presence of 'None'
                vms = VirtualMachine.parseFileList(vbox_list_file)
                for vm in vms:
                    if vm.name == setup_vm:
                        if vm.ostype is not None:
                            ostype = vm.ostype
                        else:
                            ostype = Linux

                        if vm.ram is not None:
                            ram = vm.ram
                        else:
                            ram = 256

                        if vm.vram is not None:
                            vram = vm.vram
                        else:
                            vram = 10

                        if exist_vm is not True:
                            vbox_vdi_dir = setup_vm
                            vbox_vdi = setup_vm + '.vdi'
                            vbox_vdi_path = vbox_setup_dir + setup_vm + '/'
                            vbox_name = setup_vm
                        
                        if exist_vm is not False:
                            vbox_vdi_dir = exist_vm
                            vbox_vdi = exist_vm + '.vdi'
                            vbox_vdi_path = vbox_setup_dir + exist_vm + '/'
                            vbox_name = exist_vm

                        # Change vdi uuid
                        os.system('VBoxManage internalcommands sethduuid "' + vbox_vdi_path + vbox_vdi + '"')
                        # Create VM
                        os.system('VBoxManage createvm --name ' + vbox_name + ' --basefolder "' + vbox_setup_dir + '" --register ')
                        # Setting VM
                        os.system('VBoxManage modifyvm ' + vbox_name + ' --memory ' + ram +  ' --acpi on --boot1 disk --nic1 bridged --bridgeadapter1 eth0 --ostype ' + ostype + ' --usb on --vram ' + vram)
                        # Create an IDE controller
                        os.system('VBoxManage storagectl ' + vbox_name + ' --name "IDE Controller" --add ide --controller ICH6')
                        # Add vdi to VM
                        os.system('VBoxManage storageattach ' + vbox_name + ' --storagectl "IDE Controller" --port 0 --device 0 --type hdd --medium "' + vbox_vdi_path + vbox_vdi + '"')

                        # Remove zip vm archive
                        os.unlink(setup_vm_zip)

                        print ""
                        print "VM", vbox_name, "successifully created!"
                        print ""
                                

        else:
            print "Md5sum failed, please retry download again"

