#!/usr/bin/env python
#
# Author: ZMo <simoneroselli78gmail.com>
#
# Auto-setup for VirtualBox virtual machines:
# retrieve vm from a repository / install / and
# configure it

mail_to = "simoneroselli78@gmail.com"

# Local custom settings
import config

from libdovbox import *

import os, sys, re, getpass
import urllib, urllib2, httplib
import argparse, urlparse, zipfile
import shutil, subprocess, time

# Repository URL definition
vbox_repository = config.url
vbox_repository_list = vbox_repository + 'vbox-index'

# Write func
def writeFile(filename, data):
    fd = open(filename, 'w')
    fd.write(data)
    fd.close()

# Parse URL
def getVm(url, local_file):
    x = urlparse.urlparse(url)
    conn = httplib.HTTPConnection(x.netloc)
    conn.request("GET", x.path)
    res = conn.getresponse()
    if res.status in (404, 403):
        raise IOError(res.reason)
    
    # 2 cents download progress counter
    downloaded = 0
    fd = open(local_file, 'w')
    while True:
        data = res.read(512*1024)
        if len(data) == 0:
            break
        downloaded += len(data)
        fd.write(data)
        sys.stdout.write('\b' * 80)
        sys.stdout.write('Downloading %s..' % (sizeToHuman(downloaded)))
    fd.close()
    conn.close()
    sys.stdout.write('\n')

def sizeToHuman(size):
    kb = 1024.0
    mb = 1024.0 *kb
    gb = 1024.0 *mb
    if size >= gb:
        return '%.2fGiB' % (size / gb)
    if size >= mb:
        return '%.2fMiB' % (size / mb)
    if size >= kb:
        return '%.2fKiB' % (size / kb)
    return '%dbyte' % size

# Retrieve/update vbox file list from http repo
def listUpdate():
    resp = urllib2.urlopen(vbox_repository_list, timeout=5)
    vbox_list = resp.read()
    writeFile(vbox_list_file, vbox_list)

# Show VM
def show(vm_name):
    vms = VirtualMachine.parseFileList(vbox_list_file)
    for vm in vms:
        if vm_name == vm.name:
            for key, value in vm.__dict__.items():
                if value: print(key + ': ' + value)

# Search
def search(vm_name):
    vms = VirtualMachine.parseFileList(vbox_list_file)
    for vm in vms:
        match = re.search(vm_name, vm.name, re.IGNORECASE)
        if match is not None:
            print vm.name, '-', vm.desc
        

# Read
def readfile(filename):
    f = file(filename)
    while True:
        line = f.readline()
        if len(line) == 0:
            break
        print line,
    f.close()

# Grep
def grep(string, filename):
    for line in open(filename).readlines():
        match = re.search(string + '.*', line, re.IGNORECASE)
        if match is not None:
            print match.group(0)

# Ensure of a dir
def ensDir(dir):
    if not os.path.exists(dir):
        print 'Creating %s' % (dir)
        try:
            os.makedirs(dir, mode=0775)
        except OSError:
            print "..."
            print "It seems you don't have permission to create the directory"
            print "Please create", dir, "manually, with ownership: ",vbox_user+":"+vbox_user
            exit()
            
    
# Move
def move(src, dest):
    if os.path.isdir(dest):
        shutil.move(src, dest)
    else:
        os.makedirs(dest, mode=0777)
        shutil.move(src, dest)

# Zip
def zipVm(dirname):
    vm_zip = zipfile.ZipFile(dirname + '.zip', 'w', allowZip64=True)
    
    for root, dirs, files in os.walk(dirname):
        for name in files:
            name = os.path.join(root, name)
            print 'Compressing', name, '...'
            vm_zip.write(name, compress_type=zipfile.ZIP_DEFLATED)
        
    vm_zip.close()

# Unzip
def unzip(filename, dir):
    vm_zip = zipfile.ZipFile(filename)
    for name in vm_zip.namelist():
        if name.endswith('/'):
            try:
                ensDir(os.path.join(dir, name))
            except OSError as dir_present_err:
                print dir_present_err
        
        else:
            ensDir(dir)
            vm_zip.extract(name, dir)

# Copy and rename vm tree for commit
def renCopy(dirname, rename):
    shutil.copytree(dirname, rename)
    for root, dirs, files in os.walk(rename):
        for f in files:
            f = os.path.join(root, f)
            vdi = os.path.join(root, rename + '.vdi')
            vbox = os.path.join(root, rename + '.vbox')
            vboxprev = os.path.join(root, rename + '.vbox-prev')
            if f.endswith('.vdi'):
                os.rename(f, vdi)
                subprocess.call(['VBoxManage', 'internalcommands', 'sethduuid', vdi])
            elif f.endswith('.vbox'):
                os.rename(f, vbox)
            elif f.endswith('vbox-prev'):
                os.rename(f, vboxprev)

# Rename vm if it is alredy in your VBox list
def incrVmName(vm_name):
    """ Diversifying VM name operation, based on VBoxManage commands suite output """
    installed_vms = subprocess.check_output(["VBoxManage", "list", "vms"]).split()

    count = 0

    for v in installed_vms:
        if v.startswith('"'):
            v = v.strip('"')
            if v.startswith(vm_name):
                count += 1
    
    if count is not 0:
        vm_name = '%s%s%d' % (vm_name, '-', count+1)
        return vm_name
    else:
        return False

# Rename the zip archive files with increased number
def incrFiles(name, rename, src, dst):
    os.chdir(src)
    os.rename(name, rename)
    os.chdir(rename)
    list_file = os.listdir('.')
    vdi = rename + '.vdi'
    vbox = rename + '.vbox'
    for f in list_file:
        if f.endswith('.vdi'):
            os.rename(f, vdi)
        elif f.endswith('.vbox'):
            os.rename(f, vbox)
    os.chdir(src)
    dst = dst + '/' + rename
    shutil.copytree(rename, dst)

# Parse
def parse():
    parser = argparse.ArgumentParser(add_help=False, usage='\n \
    --list                          list available machines\n \
    --index                         display the whole index file\n \
    --show VM_NAME                  display vm property\n \
    --search <STR>                  search for a vm by name\n \
    --download VM_NAME              download vm in the current dir\n \
    --setup VM_NAME [path]          download and configure vbox machines\n \
    --commit VM_NAME [custom_name]  upload your custom vm to the repository')
    
    parser.add_argument('--list', action='store_true', help='list available machines')
    parser.add_argument('--index', action='store_true', help='display the whole index file')
    parser.add_argument('--show', nargs=1, help='display vm property')
    parser.add_argument('--search', nargs=1, help='search for a vm by name')
    parser.add_argument('--download', nargs=1, help='download vm in the current dir')
    parser.add_argument('--setup', nargs='+', help='download and configure vbox machines')
    parser.add_argument('--commit', nargs='+', help='upload your custom vm to the repository') 
    return parser.parse_args()


# Parse arguments
options = parse()

if __name__ == '__main__':
    if os.name == 'posix':
        vbox_list_file = '/tmp/vbox-list-file'
        vbox_setup_dir = '/usr/local/vbox/'
        vbox_user = getpass.getuser()
    
    # --list
    if options.list:
        listUpdate()
        grep('name', vbox_list_file)

    # --index
    if options.index:
        listUpdate()
        readfile(vbox_list_file)
         
    # --show
    if options.show:
        show(sys.argv[2])

    # --search
    if options.search:
        search(sys.argv[2])

    # --download    
    if options.download:
        down_vm = options.download[0]
        try:
            getVm(vbox_repository + down_vm + '.zip', down_vm + '.zip')
        except IOError as not_found_err:
            print 'VM "%s" %s' % (down_vm, not_found_err)
            exit()

    # --commit
    if options.commit:
        vm_name = options.commit[0]
        new_name = ''
        vbox_setup_dir = vbox_setup_dir + vbox_user + '/'

        if len(options.commit) > 1:
            new_name = options.commit[1]

        # Create vm zip archive and store vm properties in it
        for root, dirs, files in os.walk(vbox_setup_dir):
            for name in dirs:
                # Check if vm you want to compress exists in path
                if name == vm_name:
                    VM_DESC = raw_input('Describe shortly your custom vm: ')
                    os.chdir(vbox_setup_dir)
                    renCopy(name, new_name)
                    zipVm(new_name)
                    exit()

                    # Open the zip archive to append vm properties
                    zip = vbox_setup_dir + vm_name + '.zip'
                    vm_zip = zipfile.ZipFile(zip, 'a')
                    x = ''
                    
                    # Retrieve VM properties
                    tmpfile = '/tmp/file.txt'
                    vm_properties = subprocess.check_output(["VBoxManage", "showvminfo", vm_name])
                    f = open(tmpfile, 'w')
                    f.write(vm_properties)
                    f.close()
                    
                    for line in open(tmpfile).readlines():
                        if re.match('os type', line, re.IGNORECASE):
                            VM_OSTYPE = line.split()[2]
                        if re.match('memory', line, re.IGNORECASE):
                            VM_RAM = line.split()[2]
                        if re.match('vram', line, re.IGNORECASE):
                            VM_VRAM = line.split()[2]

                    # Check if a new vm name has been provided 
                    if new_name:
                        VM_NAME = new_name
                        new_name_zip = new_name + '.zip'
                        new_zip = vbox_setup_dir + new_name_zip
                        os.rename(zip, new_zip)
                        zip = new_zip
                    else:
                        VM_NAME = vm_name

                    # Some other vm properties 
                    VM_MD5SUM = md5Sum(zip)
                    VM_UPDATED = date_time=time.localtime(time.time())[:3]
                    VM_SIZE = os.path.getsize(zip)

                    try:
                        VM_VALUES = {
                        'name' : VM_NAME, 
                        'md5' : VM_MD5SUM,                                                                                  
                        'desc' : VM_DESC,                                                
                        'update' : str(VM_UPDATED),                                                                                      
                        'ostype' : VM_OSTYPE,                                                                                      
                        'size' : str(VM_SIZE),                                                                                      
                        'ram' : VM_RAM,                                                                                      
                        'vram' : VM_VRAM                                                                                      
                        }

                        info = zipfile.ZipInfo('x')
                        info.compress_type=zipfile.ZIP_DEFLATED
                        info.comment= repr(VM_VALUES)
                        vm_zip.writestr(info, x)
                    finally:
                        vm_zip.close() 
                        os.unlink(tmpfile)




    # --setup
    # Check if 2nd argument (directory path) is given and
    # initialize vbox_setup_dir with that value
    if options.setup:
        listUpdate()
        if len(options.setup) > 1:
            vbox_setup_dir = options.setup[1]
            ensDir(vbox_setup_dir)
        else:
            vbox_setup_dir = vbox_setup_dir + vbox_user + '/'
            ensDir(vbox_setup_dir)
        
        # Download vm from repository  
        setup_vm = options.setup[0]
        setup_vm_zip = setup_vm + '.zip'
        try:
           getVm(vbox_repository + setup_vm_zip, setup_vm_zip)
        except IOError as not_found_err:
            print 'VM "%s" %s' % (setup_vm, not_found_err)
            exit()

        # TESTING
        #setup_vm = options.setup[0]
        #setup_vm_zip = 'test/Ubuntu_server_11.04.zip'
        
        # Perform md5sum on dumped vm
        print "Retrieve md5sum on", setup_vm
        md5_vm_zip = md5Sum(setup_vm_zip)
        vms = VirtualMachine.parseFileList(vbox_list_file)
        md5_matched = False
        for vm in vms:
            if vm.md5 == md5_vm_zip:
                md5_matched = True
                setup_vm = vm.name
                break
        
        if md5_matched == True:
            print "Md5sum matched for", setup_vm, ".."
        
            # In case a vm already exists, append an incremental number to the
            # vm name, unpack vm.zip im /tmp, then copy to the setup folder the
            # renamed vm
            #vm_name,_ = os.path.splitext(vm_zip)
            exist_vm = incrVmName(setup_vm)
            if exist_vm is not False:
                tmp_dir = '/tmp'
                print 'Extract', setup_vm_zip, 'to', tmp_dir, '..'
                unzip(setup_vm_zip, tmp_dir)
                incrFiles(setup_vm, exist_vm, tmp_dir, vbox_setup_dir)
            else:       
                print 'Extract', setup_vm_zip, 'to', vbox_setup_dir, '..'
                unzip(setup_vm_zip, vbox_setup_dir)
                
            # LiNuX
            # Define directories and vm name
            if os.name == 'posix':
                # Retrive other values from object 'vm'; put some default values in
                # presence of 'None'
                vms = VirtualMachine.parseFileList(vbox_list_file)
                for vm in vms:
                    if vm.name == setup_vm:
                        if vm.ostype is not None:
                            ostype = vm.ostype
                        else:
                            ostype = Linux

                        if vm.ram is not None:
                            ram = vm.ram
                        else:
                            ram = 256

                        if vm.vram is not None:
                            vram = vm.vram
                        else:
                            vram = 10

                        if exist_vm is not True:
                            vbox_vdi_dir = setup_vm
                            vbox_vdi = setup_vm + '.vdi'
                            vbox_vdi_path = vbox_setup_dir + setup_vm + '/'
                            vbox_name = setup_vm
                        
                        if exist_vm is not False:
                            vbox_vdi_dir = exist_vm
                            vbox_vdi = exist_vm + '.vdi'
                            vbox_vdi_path = vbox_setup_dir + exist_vm + '/'
                            vbox_name = exist_vm


                        # Change vdi uuid
                        os.system('VBoxManage internalcommands sethduuid ' + vbox_vdi_path + vbox_vdi)
                        
                        # Create VM
                        os.system('VBoxManage createvm --name ' + vbox_name + ' --basefolder ' \
                                    + vbox_setup_dir + ' --register')
                        
                        # Setting VM
                        os.system('VBoxManage modifyvm ' + vbox_name + ' --memory ' + ram + ' --acpi on \
                                    --boot1 disk --nic1 bridged --bridgeadapter1 eth0 \
                                    --ostype ' + ostype + ' --usb on --vram ' + vram)
                        
                        # Create an IDE controller
                        os.system('VBoxManage storagectl ' + vbox_name + ' --name "IDE Controller" \
                                    --add ide --controller ICH6')
                        
                        # Add vdi to VM
                        os.system('VBoxManage storageattach ' + vbox_name + ' --storagectl "IDE Controller" \
                                    --port 0 --device 0 --type hdd --medium ' + vbox_vdi_path + vbox_vdi)

                        # Remove zip vm archive
                        #os.unlink(vm_zip)

                        print ""                   
                        print "VM", vbox_name, "successifully created! ^__^"
                        print ""
                                

        else:
            print "Md5sum failed, please retry download again"
            print "or send an email to " + mail_to
            print "reporting the incident"

