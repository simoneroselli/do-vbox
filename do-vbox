#!/usr/bin/env python
#
# Author: ZMo <simoneroselli78gmail.com>
#
# Auto-setup for VirtualBox virtual machines:
# retrieve vm from http repository / install / and
# configure 

# Local custom settings
import config

import os, sys, re
import urllib, urllib2, httplib
import argparse, urlparse, zipfile
import shutil

vbox_repository = config.url
vbox_repository_list = vbox_repository + '/vbox-index'
vbox_list_file = '/tmp/vbox-list-file'
vbox_setup_dir = '/usr/local/vbox'

if len(sys.argv) < 2:
    print help
    exit()

# Write func
def writeFile(filename, data):
    fd = open(filename, 'w')
    fd.write(data)
    fd.close()

# Parse URL
def getVm(url, local_file):
    x = urlparse.urlparse(url)
    conn = httplib.HTTPConnection(x.netloc)
    conn.request("GET", x.path)
    res = conn.getresponse()
    if res.status in (404, 403):
        raise IOError(res.reason)
    
    # 2 cents download progress counter
    downloaded = 0
    fd = open(local_file, 'w')
    while True:
        data = res.read(4096)
        if len(data) == 0:
            break
        downloaded += len(data)
        fd.write(data)
        sys.stdout.write('\b' * 80)
        sys.stdout.write('Downloading %s..' % (sizeToHuman(downloaded)))
    fd.close()
    conn.close()

def sizeToHuman(size):
    kb = 1024.0
    mb = 1024.0 *kb
    gb = 1024.0 *mb
    if size >= gb:
        return '%.2fGiB' % (size / gb)
    if size >= mb:
        return '%.2fMiB' % (size / mb)
    if size >= kb:
        return '%.2fKiB' % (size / kb)
    return '%dbyte' % size

# Retrive vbox list from http repo and store it in a file
def listFile():
    resp = urllib2.urlopen(vbox_repository_list, timeout=5)
    vbox_list = resp.read()
    writeFile(vbox_list_file, vbox_list)

# Read
def readfile(filename):
    f = file(filename)
    while True:
        line = f.readline()
        if len(line) == 0:
            break
        print line,
    f.close()

# Grep
def grep(string, filename):
    for line in open(filename).readlines():
        match = re.search(string + '.*', line)
        if match is not None:
            print match.group(0)

# Mkdir
def makeDir(dir):
    if not os.path.exists(dir):
        print 'Creating %s' % (dir)
        os.makedirs(dir, mode=0777)
    
    os.chmod(dir, 0777)

# Move
def move(src, dest):
    if os.path.isdir(dest):
        shutil.move(src, dest)
    else:
        os.makedirs(dest, mode=0777)
        shutil.move(src, dest)

# MD5 sum
def md5Sum(filename):
    f = open(filename, 'r')
    data = f.read()
    md5 = hashlib.md5(data)
    md5hash = md5.hexdigest()
    f.close()
    return md5hash

# Unzip
def unzip(filename, dir):
    vm_zip = zipfile.ZipFile(filename)
    for name in vm_zip.namelist():
        if name.endswith('/'):
            try:
                makeDir(os.path.join(dir, name))
            except OSError as dir_present_err:
                print dir_present_err
        
        else:
            makeDir(dir)
            vm_zip.extract(name, dir)
# Parse
def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('--list', action='store_true', help='List available machines')
    parser.add_argument('--show', action='store_true', help='Display machines information')
    parser.add_argument('--download', nargs=1, help='Download only in the current dir')
    parser.add_argument('--setup', nargs=1, help='Download and configure a machine')
    return parser.parse_args()

# Parse arguments
options = parse()

# --list
if options.list:
    listFile()
    grep('vm-name', vbox_list_file)

# --show
if options.show:
    listFile()
    readfile(vbox_list_file)
    
# --download    
if options.download:
    vm_file = options.download[0]
    try:
        getVm(vbox_repository + vm_file, vm_file)
    except IOError as not_found_err:
        print 'VM "%s" %s' % (vm_file, not_found_err)
        exit()

# --setup
if options.setup:
    vm_file = options.setup[0]
    try:
        getVm(vbox_repository + vm_file, vm_file)
    except IOError as not_found_err:
        print 'VM "%s" %s' % (vm_file, not_found_err)
        exit()

    # Unpack the vm to /usr/local/vbox/
    print 'Unzip', vm_file, 'to', vbox_setup_dir, '..'
    unzip(vm_file, vbox_setup_dir)


	stringa = grep(file)
	print stringa.split(' ')[1]
	
	#TODO:
	# md5cum check	
    # change vm uuid
    # test if the vdi already exists
    

    # replace uuid in xml machine file before create
    # create it with the right xml
