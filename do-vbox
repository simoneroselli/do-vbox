#!/usr/bin/env python
#
# Author: ZMo <simoneroselli78gmail.com>
#
# Auto-setup for VirtualBox virtual machines:
# retrieve vm from http repository / install / and
# configure 

mail_to = "simoneroselli78@gmail.com"

# Local custom settings
import config

import os, sys, re, getpass
import urllib, urllib2, httplib
import argparse, urlparse, zipfile
import shutil, hashlib, subprocess

# Repository URL definition
vbox_repository = config.url
vbox_repository_list = vbox_repository + 'vbox-index'


# Write func
def writeFile(filename, data):
    fd = open(filename, 'w')
    fd.write(data)
    fd.close()

# Parse URL
def getVm(url, local_file):
    x = urlparse.urlparse(url)
    conn = httplib.HTTPConnection(x.netloc)
    conn.request("GET", x.path)
    res = conn.getresponse()
    if res.status in (404, 403):
        raise IOError(res.reason)
    
    # 2 cents download progress counter
    downloaded = 0
    fd = open(local_file, 'w')
    while True:
        data = res.read(512*1024)
        if len(data) == 0:
            break
        downloaded += len(data)
        fd.write(data)
        sys.stdout.write('\b' * 80)
        sys.stdout.write('Downloading %s..' % (sizeToHuman(downloaded)))
    fd.close()
    conn.close()
    sys.stdout.write('\n')

def sizeToHuman(size):
    kb = 1024.0
    mb = 1024.0 *kb
    gb = 1024.0 *mb
    if size >= gb:
        return '%.2fGiB' % (size / gb)
    if size >= mb:
        return '%.2fMiB' % (size / mb)
    if size >= kb:
        return '%.2fKiB' % (size / kb)
    return '%dbyte' % size

# Retrive/update vbox file list from http repo
def listUpdate():
    resp = urllib2.urlopen(vbox_repository_list, timeout=5)
    vbox_list = resp.read()
    writeFile(vbox_list_file, vbox_list)

# Read
def readfile(filename):
    f = file(filename)
    while True:
        line = f.readline()
        if len(line) == 0:
            break
        print line,
    f.close()

# Grep
def grep(string, filename):
    for line in open(filename).readlines():
        match = re.search(string + '.*', line)
        if match is not None:
            print match.group(0)

# Ensure of a dir
def ensDir(dir):
    if not os.path.exists(dir):
        print 'Creating %s' % (dir)
        try:
            os.makedirs(dir, mode=0775)
        except OSError:
            print "It seems you don't have permission to create ", dir
    
    os.chmod(dir, 0777)

# Move
def move(src, dest):
    if os.path.isdir(dest):
        shutil.move(src, dest)
    else:
        os.makedirs(dest, mode=0777)
        shutil.move(src, dest)

# MD5 sum
def md5Sum(filename):
    f = open(filename, 'r')
    md5 = hashlib.md5()
    while True:
        data = f.read(8196)
        if not data:
            break
        md5.update(data)

    md5hash = md5.hexdigest()
    f.close()
    return md5hash

# Create a virtual machines python list (virtual_machines = [] )
# from vbox-index text file
class VirtualMachine(object):
    def __init__(self, name=None, md5=None, desc=None, updated=None, size=None, ostype=None, arc=None, ram=None, vram=None, login=None):
        self.name = name
        self.md5 = md5
        self.desc = desc
        self.updated = updated
        self.size = size
        self.ostype = ostype
        self.arc = arc
        self.ram = ram
        self.vram = vram
        self.login = login

    def isValid(self):
        return self.name is not None and self.md5 is not None
    
    @staticmethod
    def parseFileList(filename):
        """ Put vbox-index file into a python list """
        virtual_machines = []

        f = open(filename, "r")
        vm = VirtualMachine()
        for line in f:
            line = line.strip()
            if len(line) == 0:
                if vm.isValid():
                    virtual_machines.append(vm)
                vm = VirtualMachine()
            else:
                # cerco i : (split su i :)
                # ottengo key: valore
                key, value = line.split(':')
                key = key.strip()
                value = value.strip()
                setattr(vm, key, value)             
        if vm.isValid():
            virtual_machines.append(vm)
        f.close()

        return virtual_machines


# Unzip
def unzip(filename, dir):
    vm_zip = zipfile.ZipFile(filename)
    for name in vm_zip.namelist():
        if name.endswith('/'):
            try:
                ensDir(os.path.join(dir, name))
            except OSError as dir_present_err:
                print dir_present_err
        
        else:
            ensDir(dir)
            vm_zip.extract(name, dir)


# Rename vm if it is alredy in your VBox list
def incrVmName(vm_name):
    """ Diversifing VM name operation, based on VBoxManage commands suite output """
    installed_vms = subprocess.check_output(["VBoxManage", "list", "vms"]).split()
    
    count = 0

    for item in installed_vms:
        if item.startswith('{'):
            continue
        else:
            item_list = item.strip('"')
            if item_list.startswith(vm_name):
                count += 1
    
    if count is not 0:
        vm_name = '%s%s%d' % (vm_name, '-', count+1)
        return vm_name
    else:
        return False


# Parse
def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('--listname', action='store_true', help='List available machines')
    parser.add_argument('--show', action='store_true', help='Display machines information')
    parser.add_argument('--download', nargs=1, help='Download only in the current dir')
    parser.add_argument('--setup', nargs='+', help='Download and configure a machine')
    return parser.parse_args()

# Parse arguments
options = parse()

if __name__ == '__main__':
    if os.name == 'posix':
        vbox_list_file = '/tmp/vbox-list-file'
        vbox_setup_dir = '/usr/local/vbox/'
        vbox_user = getpass.getuser()
    
    # --listname
    if options.listname:
        listUpdate()
        grep('name', vbox_list_file)

    # --show
    if options.show:
        listUpdate()
        readfile(vbox_list_file)
         
    # --download    
    # Download vm from repository
    if options.download:
        vm_zip = options.download[0]
        try:
            getVm(vbox_repository + vm_zip, vm_zip)
        except IOError as not_found_err:
            print 'VM "%s" %s' % (vm_zip, not_found_err)
            exit()

    # --setup
    # Check if 2nd argument (directory path) is given and
    # initialize vbox_setup_dir with that value
    if options.setup:
        listUpdate()
        if len(options.setup) < 1:
            vbox_setup_dir = options.setup[1]
            ensDir(vbox_setup_dir)
        else:
            vbox_setup_dir = vbox_setup_dir + vbox_user + '/'
            ensDir(vbox_setup_dir)
        
        # Download vm from repository  
        vm_zip = options.setup[0]
        try:
           getVm(vbox_repository + vm_zip, vm_zip)
        except IOError as not_found_err:
            print 'VM "%s" %s' % (vm_zip, not_found_err)
            exit()
        
        
        # Perform md5sum on dumped vm
        print "Retrive md5sum on", vm_zip
        md5_vm_zip = md5Sum(vm_zip)
        vms = VirtualMachine.parseFileList(vbox_list_file)
        md5_matched = False
        for vm in vms:
            if vm.md5 == md5_vm_zip:
                md5_matched = True
                md5_vm_name = vm.name
                break
        
        if md5_matched == True:
            print "Md5sum matched for", md5_vm_name, ".."
        
            # In case of vm already exists, append an incremental 
            # number to name
            vm_name,_ = os.path.splitext(vm_zip)
            vm_exist = incrVmName(vm_name)
            if vm_exist is not False:
                vm_name = vm_exist
                
                # For the vms which are already, unpack stuff into
                # /tmp, rename files and move them to the path
                vbox_setup_dir = '/tmp'
                print 'Unzip', vm_zip, 'to', vbox_setup_dir, '..'
                unzip(vm_zip, vbox_setup_dir)
                    
 
            # Unpack the vm to vbox_setup_dir
            print 'Unzip', vm_zip, 'to', vbox_setup_dir, '..'
            unzip(vm_zip, vbox_setup_dir)

            # LiNuX
            # Define directories and vm name
            if os.name == 'posix':
                if md5_matched == True:
                    # Retrive other values from object 'vm'
                    vms = VirtualMachine.parseFileList(vbox_list_file)
                    for vm in vms:
                        if vm.name == vm_zip:
                            ostype = vm.ostype
                            ram = vm.ram
                            vram = vm.vram

                            vbox_vdi_dir,_ = os.path.splitext(vm_zip)
                            vbox_vdi = vbox_vdi_dir + '.vdi'
                            vbox_vdi_path = vbox_setup_dir + vbox_vdi_dir + '/'
                            vbox_name = vbox_vdi_dir 
                            
                            # Handle VM already present in your VirtualBox
                            incrVmName(vbox_name)

                            # Change vdi uuid
                            os.system('VBoxManage internalcommands sethduuid ' + vbox_vdi_path + vbox_vdi)
                            
                            # Create VM
                            os.system('VBoxManage createvm --name ' + vbox_name + ' --basefolder ' \
                                        + vbox_setup_dir + ' --register')
                            
                            # Setting VM
                            os.system('VBoxManage modifyvm ' + vbox_name + ' --memory ' + ram + ' --acpi on \
                                        --boot1 disk --nic1 bridged --bridgeadapter1 eth0 \
                                        --ostype ' + ostype + ' --usb on --vram ' + vram)
                            
                            # Create an IDE controller
                            os.system('VBoxManage storagectl ' + vbox_name + ' --name "IDE Controller" \
                                        --add ide --controller ICH6')
                            
                            # Add vdi to VM
                            os.system('VBoxManage storageattach ' + vbox_name + ' --storagectl "IDE Controller" \
                                        --port 0 --device 0 --type hdd --medium ' + vbox_vdi_path + vbox_vdi)

                            # Remove zip vm archive
                            os.unlink(vm_zip)

                            print ""                   
                            print vbox_name, "successifully created! ^__^"
                            print ""
                                

        else:
            print "Md5sum failed, please retry download again"
            print "or send an email to " + mail_to
            print "reporting the incident"



# Todo
# Mattew Feature: if a vm is already then add it changing uuid and name (ie: win_home_clean2, win_home_clean3)
# re-deploy "os.system" section using "subprocess"
# Check if the directory path given as argument is writable by the user
